preload_cards:
  [map, iframe, markdown]
preload_rows:
  [input-select-entity]

anchors:
  ⚓₁: &title
    entity: sensor.placeholder
    tap_action:
      action: none
    hold_action:
      action: none
    type: state-label
  ⚓₂: &title-style
    color: '#bcbebf'
    font-family: SF Text
    font-size: 2.4vw
    font-weight: 500
    max-width: 1px
    cursor: default

button_card_templates:
  homekit:
    show_state: true
    show_icon: false
    aspect_ratio: 1/1
    styles:
      name: &button_styles_name
        - top: 60%
        - left: 10%
        - position: absolute
        - line-height: 2vw
        - font-weight: bold
      state: &button_styles_state
        - top: 75%
        - left: 10%
        - position: absolute
        - line-height: 2vw

  light:
    state: &button_state
      - value: 'on'
        styles:
          card: [background-color: 'rgba(255, 255, 255, 0.8)']
          name: [color: 'rgba(0, 0, 0, 0.6)']
          state: [color: 'rgba(0, 0, 0, 0.6)']
    custom_fields:
      info: >
        [[[ if (entity.state === 'on' && entity.attributes.brightness) {
        const brightness = Math.round(entity.attributes.brightness / 2.54);
        const radius = 20.5; const circumference = radius * 2 * Math.PI; 
        return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" style="
        transform: rotate(-90deg); transform-origin: 50% 50%; stroke-dasharray: ${circumference}; stroke-dashoffset: ${circumference - brightness / 100 * circumference};" />
        <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="8">%</tspan></text></svg>`; } ]]]
    styles:
      custom_fields:
        info: &circle_pos
          [top: 8.5%, left: 56.2%, width: 3.5vw, position: absolute, letter-spacing: 0.03vw]
    tap_action:
      action: toggle
      haptic: light
    hold_action:
      action: call-service
      service: browser_mod.popup
      service_data:
        title: Stäng
        deviceID: this
        style:
          --ha-card-border-radius: 1em
          --more-info-header-color: rgba(255,255,255,0.6)
          background: none
          box-shadow: none
        card:
          type: vertical-stack
          cards:
            - type: entities
              title: '[[[ return entity.attributes.friendly_name ]]]'
              style: &popup_style |
                ha-card {
                  animation: pop-in 0.8s cubic-bezier(0.16, 1, 0.3, 1) both; transform-origin: center;
                  box-shadow: none; border-radius: 1em; padding: 0.3em 1.25em 0.4em 0.5em; 
                  background: linear-gradient(180deg, rgba(48,52,52,1) 0%, rgba(48,52,52,1) 4.8em, rgba(34,38,39,1) 4.8em, rgba(34,38,39,1) 100%); }
                .card-header {
                  margin: -0.4em 0 1.4em 0.4em; font-family: sf text; letter-spacing: 0.005em; font-size: 1.5em;}
                @keyframes pop-in {
                  0% { transform: scale(0.6); opacity: 0; } 20% { opacity: 0; } 100% { transform: scale(1); opacity: 0.9; }}
              show_header_toggle: false
              entities:
                - type: custom:light-popup-card
                  entity: '[[[ return entity.entity_id ]]]'
                  icon: none
                  fullscreen: false
                  brightnessWidth: 130px
                  brightnessHeight: 360px
                  borderRadius: 1.7em
                  sliderColor: '#c7c7c7'
                  sliderTrackColor: rgba(25, 25, 25, 0.9)
                  actionSize: 4.5em
                  actionsInARow: 2
                  style: |
                    #popup { 
                      margin: -2.4em 0 1.4em 0; }
                    #popup > div.range-holder > input[type=range] {
                      cursor: grab; }
                    #brightnessValue {
                      color: rgba(255, 255, 255, 0.8); margin: -1em 0 0 0; font-size: 2em; font-weight: 400; 
                      position: absolute; z-index: 100; font-family: SF Display; letter-spacing: 0.02em; pointer-events: none; 
                      mix-blend-mode: difference; text-align:center; width: 3.4em; height: 3.4em; }
                    #popup > div.range-holder > input[type=range]::-webkit-slider-thumb {
                      border: 0; eight: 0; width: 0; cursor: grabbing; }
                    #popup > div.action-holder > div > div {
                      margin: 0.8em 0.5em -0.8em 0.5em; }
                    #popup > div.action-holder > div:nth-child(2) > div:nth-child(2) > span {
                      background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 80%), 
                      conic-gradient(rgb(120,39,230), rgb(230,34,231), rgb(228,5,136), rgb(228,25,25), rgb(229,105,30), rgb(232,226,46), 
                      rgb(125,230,41), rgb(52,232,40), rgb(51,231,92), rgb(52,232,224),rgb(32,125,229), rgb(18,39,229), rgb(120,39,230));
                      border-width: 2px; border-color: #e6e6e6; --size: 4.4em !important; }
                  actions:
                    - service: light.turn_on
                      service_data:
                        entity_id: '[[[ return entity.entity_id ]]]'
                        color_temp: 153
                      color: "#d8d9e1"
                    - service: light.turn_on
                      service_data:
                        entity_id: '[[[ return entity.entity_id ]]]'
                        color_temp: 326
                      color: "#d5b08d"
                    - service: light.turn_on
                      service_data:
                        entity_id: '[[[ return entity.entity_id ]]]'
                        color_temp: 500
                      color: "#ce944b"
                    - service: browser_mod.popup
                      service_data:
                        title: Lumière
                        deviceID: this
                        style:
                          --ha-card-border-radius: 1em
                          --more-info-header-color: rgba(255,255,255,0.6)
                          background: none
                          box-shadow: none
                        card:
                          type: entities
                          title: Färginställningar
                          style: *popup_style
                          show_header_toggle: false
                          entities:
                            - entity: '[[[ return entity.entity_id ]]]'
                              secondary_info: last-changed
                            - type: custom:light-entity-card
                              entity: '[[[ return entity.entity_id ]]]'
                              style:
                                .: |
                                  ha-card {
                                    background: none; box-shadow: none; margin: -0.5em -1em -0.5em -0.7em; }
                                  ha-card > div.light-entity-card-sliders.ha-slider-full-width { 
                                    margin-bottom: 0.75em; }
                                  ha-card > div.light-entity-card-sliders.ha-slider-full-width > div > ha-icon {
                                    margin: auto; width: 34px; height: 34px; cursor: default; 
                                    padding-right: 0.49em; color: var(--paper-item-icon-color);}
                                  ha-card > div.light-entity-card-sliders.ha-slider-full-width > div > div {
                                    margin: auto; padding: 0 1.4em 0 1em; max-width: 1em; cursor: default;}
                                'ha-card > div.light-entity-card-sliders.ha-slider-full-width > div > ha-slider':
                                  $: |
                                    #sliderContainer { 
                                      --calculated-paper-slider-height: var(--paper-slider-height, 5px); }
                              brightness: false
                              color_temp: true
                              full_width_sliders: true
                              header: false
                              show_slider_percent: true
                              smooth_color_wheel: true

  switch:
    aspect_ratio: 1/1
    show_state: true
    show_icon: false
    state: *button_state
    styles:
      name: *button_styles_name
      state: *button_styles_state
      card: *button_styles_card
      custom_fields:
        loading:
          [filter: "[[[ return entity.state === 'off' ? 'invert(1)' : 'none'; ]]]", 
           top: 3%, left: 60%, width: 3.7vw, position: absolute, opacity: 0.6]
    tap_action:
      haptic: light

  icon_action:
    color: '#9da0a2'
    styles:
      card:
        [background: '#FFFFFF10', border-radius: 0.6em, box-shadow: none, 
        transition: none, width: 4em, height: 3.7em]

  name_action:
    styles:
      name:
        [display: flex, align-items: center, justify-content: center, margin-top: 0.5px]
      card:
        [background: '#FFFFFF10', color: '#9da0a2', border-radius: 0.6em, box-shadow: none, 
        transition: none, width: 100%, padding: 1em 1.4em 1em 1.2em, font-size: 1.06em, 
        font-weight: 500, letter-spacing: 0.015em]
    style: '#name > ha-icon {width: 1.4em; margin-right: 0.3em; }'

  media:
    aspect_ratio: 1/1
    show_state: true
    show_icon: false
    state_display: >
      [[[ if (entity.attributes.media_title === 'Nothing playing' || entity.attributes.media_title === 'No title' && entity.state === 'paused' ) { return 'Inget spelas'; }
      if (entity.attributes.media_title === 'No title' && entity.state === 'playing') { return 'Ingen titel'; }
      else { return entity.attributes.media_title; } ]]]
    custom_fields:
      media_image: >
        <svg viewBox="0 0 50 50" />
      blur: >
        [[[ if (entity.attributes.entity_picture != null) {
        return '<svg viewBox="0 0 50 50" />'; } ]]]
      overlay: >
        [[[ if (entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby' && entity.state != 'unavailable') {
        return '<svg viewBox="0 0 50 50" />'; } ]]]
      play_pause: >
        [[[ const style = `<style>.scale-up { animation: scale-up 0.3s; cubic-bezier(.05,.5,.3,1) 1; transform-origin: center center; }
        @keyframes scale-up { 0% { opacity: 0; transform: scale(0); } 100% { opacity: 1; transform: scale(1); } }</style>`;
        if (entity.state === 'playing') { return `<svg viewBox="0 0 166 166">${style}<path class="scale-up" d="M0 0h59.9v166H0zm106.1 0H166v166h-59.9z"/></svg>`; }
        if (entity.state === 'paused') { return `<svg viewBox="0 0 166 166">${style}<path class="scale-up" d="M0 0l166 83L0 166z"/></svg>`; } ]]]
    tap_action: &media_tap_action
      action: >
        [[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby') {
        return 'none'; } else { return 'call-service'; } ]]]
      service: media_player.media_play_pause
      service_data:
        entity_id: '[[[ return entity.entity_id ]]]'
      haptic: light
    styles:
      custom_fields:
        media_image:
          [background-image:
          "[[[ return entity.attributes.entity_picture == null ? 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)' 
          : 'linear-gradient(0deg, rgba(13,17,19,0.9) 0%, rgba(13,17,19,0) 50%), url(' + entity.attributes.entity_picture + ')'; ]]]", 
          background-size: cover, top: 0%, left: 0%, width: 100%, position: absolute]
        blur:
          [background-image:
          "[[[ return entity.attributes.entity_picture == null ? 'none' : 'url(' + entity.attributes.entity_picture + ')'; ]]]", 
          background-size: cover, top: 0%, left: 0%, width: 100%, filter: blur(4px), clip-path: inset(16vw 0 0 0), position: absolute]
        overlay:
          [background:
          "[[[ return entity.attributes.entity_picture == null ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.4)'; ]]]", 
          background-size: cover, z-index: 0, top: 16vw, left: 0%, width: 100%, opacity: 1, position: absolute]
        play_pause:
          [filter: 
          "[[[ return entity.attributes.entity_picture == null ? 'none' : 'drop-shadow(0 0 1.3vw rgba(0,0,0,0.7))'; ]]]", 
          fill: '#dedede', top: 0, right: 0, bottom: 0, left: 0, margin: auto, width: 21%, height: 21%, position: absolute]
        icon:
          [fill:
          "[[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' || entity.state === 'unavailable') return '#9da0a2'; 
          else return 'rgba(255, 255, 255, 0.8)'; ]]]", 
          top: 5.35%, left: 5.35%, width: 2.95vw, position: absolute]
      name:
        [top: 79.8%, left: 5.3%, position: absolute, line-height: 2vw, z-index: 10]
      state:
        [top: 87.5%, left: 5.3%, position: absolute, line-height: 2vw, z-index: 10, 
        white-space: nowrap, overflow: hidden, text-overflow: ellipsis, max-width: 90%]
      card: 
        [<<: *button_styles_card, background-color: none, 
        color: &media_font_color "[[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' || entity.state === 'unavailable') { return 'rgba(255, 255, 255, 0.3)'; }
        if ((entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby') && (entity.attributes.entity_picture == null)) {
        return 'rgba(0, 0, 0, 0.6)'; } else { return '#efefef'; } ]]]", 
        text-shadow: &media_text_shadow "[[[ if (entity.attributes.entity_picture == null) return 'none'; 
        else return '1px 1px 5px rgba(18, 22, 23, 0.9)' ; ]]]"]

  media_small:
    aspect_ratio: 1/1
    show_state: true
    show_icon: false
    tap_action: *media_tap_action
    styles:
      custom_fields:
        icon:
          [opacity: "[[[ return entity.attributes.entity_picture == null ? 1 : 0; ]]]", 
          top: 11.5%, left: 11.5%, width: 2.9vw, position: absolute, fill: '#9da0a2']
      name: *button_styles_name
      state: *button_styles_state
      card:
        [<<: *button_styles_card, color: *media_font_color, text-shadow: *media_text_shadow, 
        background-color: none, background-size: cover,
        background-image: 
        "[[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' || entity.state === 'unavailable') {
        return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)'; }
        if ((entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby') && (entity.attributes.entity_picture == null)) {
        return 'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)'; }
        else { return 'linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(' + entity.attributes.entity_picture + ')'; } ]]]"]


title: Home
views:
  - panel: true
    path: default_view
    title: Home
    badges: []
    cards:
      - type: picture-elements
        image: /local/background.png
        style:
          .: |
            /* Global */

            #root > hui-icon-element {color: rgba(255, 255, 255, 0.1) !important; transition: 0.4s;}
            #root > hui-icon-element:hover {color: rgba(255, 255, 255, 0.25) !important; transition: none;}
            #root > hui-icon-element:active {color: rgba(255, 255, 255, 0.35) !important; transition: none;}

          "#root > hui-image":
            $: |
              #image {pointer-events: none;}

          "#root > hui-markdown-card, #key1":
            $: |
              ha-card > ha-markdown {padding: 0 !important;}

          "#root > hui-markdown-card, #key2":
            $:
              "ha-card > ha-markdown":
                $: |
                  ha-markdown-element > font > ha-icon {vertical-align: 3%; opacity: 0.6;}
                  ha-markdown-element > p > span {font-family: SF Text; font-size: 5vw; 
                  font-weight: 200; margin-left: -0.3vw; letter-spacing: -0.05vw;}

          "#root > hui-state-label-element":
            $: |
              div {padding: 0 !important;}

          "#root > hui-conditional-element:nth-child(11) > button-card":
            $: |
              #card { background-color: #202a2f90; }
              #card:hover, #card:active { filter: brightness(140%); transition: none; }
        
        elements:
          - prefix: Salon
            <<: *title
            style:
              top: 9.15%
              left: 25.4%
              <<: *title-style

          - type: custom:button-card
            entity: light.lampadaire_ikea
            style:
              top: 20.35%
              left: 30.31%
              width: 120px
              height: 120px
            custom_fields:
              icon_hue: &icon_hue >
                [[[ const state = entity.state === 'on' ? 'animate' : null;
                return `<svg viewBox="0 0 50 50"><style>@keyframes animate{0%{transform: scale(0.85);}20%{transform: scale(1.1);}40%{transform: scale(0.95);}60%{transform: scale(1.03);}80%{transform: scale(0.97);}100%{transform: scale(1);}}.animate{animation: animate 0.8s; transform-origin: center;}</style>
                <path fill="#9da0a2" d="M27.4 47.3h-4.9s-.7.1-.7.8.4.9.7.9h4.9c.3 0 .7-.1.7-.9s-.7-.8-.7-.8zm3.3-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-3H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9s-.9-.8-.9-.8zm5.2-23.2c-3.3-5.3-7-5.6-10.9-5.6-3.8 0-8.4.4-10.9 5.6-.1.1-.1.3.1.7.4.8 3.3 7.2 3.2 18.8 0 1.1-.1 1.6 0 1.7 0 .1 0 .7 1.1.7h13c1 0 1-.5 1.1-.7v-1.7c-.1-11.6 2.8-18 3.2-18.8.1-.4.1-.5.1-.7"/>
                <path class="${state}" fill="var(--button-card-light-color-no-temperature)" d="M14.1 15.3c3.4-.3 7-.4 10.9-.4 3.8 0 7.5.2 10.9.4.4-.4.7-.8.9-1.1C39 8.5 38.9 6.5 38.9 6c-.2-4.4-8.4-5-12.1-5h0-3.4c-3.7 0-12 .5-12.1 5 0 .5-.1 2.5 2.1 8.2 0 .3.3.8.7 1.1z"/></svg>`; ]]]
            styles: &icon_hue_styles
              custom_fields:
                icon_hue:
                  [top: 11%, left: 4.5%, width: 3.05vw, position: absolute]
            template:
              - homekit
              - light

          - type: custom:button-card
            entity: light.lampe_chevet_droite
            name: Lampe chevet
            style:
              top: 20.35%
              left: 41.31%
              width: 120px
              height: 120px
            custom_fields:
              icon_shade: >
                [[[ const state = entity.state === 'on' ? 'animate' : null;
                return `<svg viewBox="0 0 50 50"><style>@keyframes animate{0%{transform: scale(0.85);}20%{transform: scale(1.1);}40%{transform: scale(0.95);}60%{transform: scale(1.03);}80%{transform: scale(0.97);}100%{transform: scale(1);}}.animate{animation: animate 0.8s; transform-origin: center;}</style>
                <path fill="#9da0a2" d="M26.4 25.6c.6-.3 1.1-.7 1.1-1.3L25 17.9l-2.5 6.4c0 .7.6 1.1 1.1 1.3v20.8h-5.5v2.7h13.7v-2.7h-5.5V25.6z"/>
                <path class="${state}" fill="var(--button-card-light-color-no-temperature)" d="M24.6.9l-9.4.5c-.6.1-1.9 0-2.5 2.1s-2.4 9.1-4 16.9c-.2.7-.5 2-.5 2.3s-.4 1.6.9 1.6c.8.1 7.4.3 15.9.3 8.6 0 15.1-.3 15.9-.3 1.3-.1.9-1.3.9-1.6s-.3-1.6-.5-2.3c-1.6-7.8-3.4-14.8-4-16.9s-1.9-2-2.5-2.1c-1.6-.2-6.9-.4-9.4-.5"/> </svg>`;]]]
            styles:
              custom_fields:
                icon_shade:
                  [top: 11%, left: 4.6%, width: 3.05vw, position: absolute]
            template:
              - homekit
              - light


